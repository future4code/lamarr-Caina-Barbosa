console.log("Boas vindas ao jogo de Blackjack!")

//Esta primeira fun√ß√£o √© o core mais b√°sico do jogo - determina se voc√™ vai jogar ou n√£o, e se vai querer continuar jogando.
//Utilizei uma recurs√£o (invocando a fun√ß√£o dentro dela mesma) pra poder testar mais r√°pido, sem ter que dar F5. 
//Nesse caso, no final de cada rodada, ap√≥s imprimir os vencedores, voc√™ ser√° convidado a jogar novamente, podendo responder sim ou n√£o.

function startGame() { 
   if(confirm("Quer iniciar uma nova rodada?")){
      startRound()
      startGame()
   } else {
      alert("O jogo acabou üòû")
   }
}

//Essa fun√ß√£o √© a mais complexa, e carrega todo o funcionamento do jogo. 

function startRound() {
   let cards = drawCards()
   let playerPoints = cards[0][0].valor + cards[0][1].valor
   let cpuPoints = cards[1][0].valor + cards [1][1].valor      //Temos aqui o sorteio inicial de duas cartas pros jogadores, e a pontua√ß√£o √© calculada
   if(playerPoints === 22 || cpuPoints === 22){
      cards = drawCards()
      playerPoints = cards[0][0].valor + cards[0][1].valor     
      cpuPoints = cards[1][0].valor + cards [1][1].valor
   }                                                           //uma checagem pra ver se n√£o foram tirado dois ases. Caso positivo, uma nova m√£o √© sorteada, e o calculo da pontua√ß√£o √© atualizado.
   let playerCards = [cards[0][0].texto, cards[0][1].texto]
   let cpuCards = [cards[1][0].texto, cards[1][1].texto]       //Criam-se arrays de strings, importantes para todas as impress√µes realizadas pelo jogo.
   while(playerPoints < 21){
      if(confirm("Suas cartas s√£o " + playerCards + "\n" + "A carta revelada do computador √© " + cpuCards[0] + "\n" + "Deseja comprar mais uma carta?")){
         let extraCard = comprarCarta()
         playerPoints += extraCard.valor
         playerCards.push(extraCard.texto)
      } else {
         break;
      }
   }                                                           //Esse loop √© respons√°vel por oferecer ao jogador a possibilidade de comprar cartas enquanto sua pontua√ß√£o n√£o atinge/ultrapassa o m√°ximo
   if(playerPoints <= 21){
      while(cpuPoints < playerPoints){
         let extraCard = comprarCarta()
         cpuPoints += extraCard.valor
         cpuCards.push(extraCard.texto)
      }                                                        //Enquanto esse loop vai regular as jogadas da CPU.   
   }
   showWinner(playerCards, cpuCards, defineResult(playerPoints, cpuPoints), playerPoints, cpuPoints) //Por fim, temos a invoca√ß√£o de duas fun√ß√µes, respons√°veis por definir o vencedor e imprimir a mensagem de finaliza√ß√£o de uma rodada.
}



function drawCards () {
   let playerCards = [comprarCarta(), comprarCarta()]
   let cpuCards = [comprarCarta(), comprarCarta()]
   return [playerCards, cpuCards]
}                                                              //Fun√ß√£o extremamente simples, retorna um array de arrays de objetos, contendo as cartas iniciais dos jogadores.

function defineResult (playerPoints, cpuPoints) {
   let result
   if (playerPoints > cpuPoints && playerPoints < 22 || cpuPoints > 21) {
      result = "usu√°rio"
   }
   else if(cpuPoints > playerPoints || playerPoints > 21) {
      result = "computador"
   }
   else {
      result = "Empate!"
   }
   return result                                               //Define o ganhador, ou se empatou. N√£o tem muito sgredo. √â importante o resultado ser passado em string pois ser√° reutilizado na fun√ß√£o abaixo pra simplificar o c√≥digo usando template strings.   
}

function showWinner (playerCards, cpuCards, result, playerPoints, cpuPoints) {
   let resultMessage = ""
   resultMessage += (`Usu√°rio - cartas: ${playerCards} - pontua√ß√£o ${playerPoints}`)
   resultMessage += "\n"
   resultMessage += (`Computador - cartas: ${cpuCards} - pontua√ß√£o ${cpuPoints}`)
   resultMessage += "\n"
   if(result === "usu√°rio" || result === "computador"){
      resultMessage += (`O ${result} ganhou!`)
   } else {
      resultMessage += ("Empate!")
   }
   alert(resultMessage)  
}                                                              //Como a mensagem final √© passada em alert, essa fun√ß√£o tem como objetivo a constru√ß√£o de uma string. A √∫ltima linha da string sempre ser√° uma das 3 possibilidades = Vit√≥ria player, vit√≥ria CPU ou empate.

startGame();                                                   //Finalmente, invocamos a fun√ß√£o que d√° in√≠cio ao jogo! 